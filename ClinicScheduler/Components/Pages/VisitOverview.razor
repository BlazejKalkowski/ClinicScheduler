@page "/visit"
@using ClinicScheduler.Interfaces
@using ClinicScheduler.Entieties
@inject IVisitService VisitService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Visits</PageTitle>
<h3>Visits</h3>

@if (_visits.Count == 0)
{
    <p><em>Loading Visits...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Doctor</th>
            <th>Patient</th>
            <th>Specialization</th>
            <th>DateOfVisit</th>
            <th>PrescriptionNumber</th>
            <th>IsConfirmed</th>
            <th>Edit Visit</th>
            <th>Delete Visit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var visit in _visits)
        {
            <tr>
                <td>@visit.Doctor.FullName</td>
                <td>@visit.Patient.FullName </td>
                <td>@visit.Doctor.Specialization </td>
                <td>@visit.DateOfVisit</td>
                <td>@visit.PrescriptionNumber</td>
                <td>@visit.IsConfirmed</td>
                <th><button class="btn btn-primary" @onclick="@(() => EditVisit(visit.Id))">Edit</button></th>
                <th><button class="btn btn-danger" @onclick="@(() => DeleteVisit(visit.Id))">Delete</button></th>
            </tr>
        }
        </tbody>
    </table>
    
    <button class="btn btn-primary" @onclick="AddVisit">Add a new Visit</button>
}

@code {
    private List<Visit> _visits = new List<Visit>();

    protected override async Task OnInitializedAsync()
    {
        _visits = await VisitService.GetAllVisitsAsync();
    }

    void AddVisit()
    {
        NavigationManager.NavigateTo("/edit-visit");
    }
    void EditVisit(int id)
    {
        NavigationManager.NavigateTo($"/edit-visit/{id}");
    }

    async Task DeleteVisit(int id)
    {
        await VisitService.DeleteVisitAsync(id);
        NavigationManager.NavigateTo("/visit");
    }
}
