@page "/login"
@using ClinicScheduler.Dto
@using ClinicScheduler.Middleware
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Net

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject CustomAuthenticateStateProvider AuthenticateStateProvider

<h3>Login</h3>

<MudGrid Justify="Justify.Center">
    <MudItem lg="3">
        <EditForm OnValidSubmit="Submit" Model="_loginDto">
            <MudField FullWidth="true" Label="Email" @bind-Value="_loginDto.Email" />  
            <MudField FullWidth="true" Label="Password" @bind-Value="_loginDto.Password"/>  
            <MudButton ButtonType="ButtonType.Submit">Sign In</MudButton>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default !;
    private LoginDto _loginDto = new();
    
    private async Task Submit()
    {
        var response = await Http.PostAsJsonAsync("/login", _loginDto);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", data);
            var userInfoResponse = await Http.GetAsync("/account/info");

            if (userInfoResponse.IsSuccessStatusCode)
            {
                var userInfo = await userInfoResponse.Content.ReadFromJsonAsync<UserDto?>();
                await AuthenticateStateProvider.AuthenticateAsync(userInfo);
                NavigationManager.NavigateTo("/");
            }
        }
    }

}