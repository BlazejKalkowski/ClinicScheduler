@page "/zaloguj"
@using ClinicScheduler.Dto
@using ClinicScheduler.Middleware
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Net
@using Microsoft.AspNetCore.Mvc
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject CustomAuthenticateStateProvider AuthenticateStateProvider


<h3>Login</h3>

<MudGrid Justify="Justify.Center">
    <MudItem lg="3">
        <EditForm OnInvalidSubmit="Submit" Model="_loginDto">
            <MudTextField FullWidth="true" Label="Email" @bind-Value="_loginDto.Email"/>
            <MudTextField FullWidth="true" InputType="InputType.Password" Label="Password" @bind-Value="_loginDto.Password" />
            <MudButton ButtonType="ButtonType.Submit">Sign In</MudButton>
        </EditForm>
    </MudItem>
</MudGrid>


@code {
    private LoginDto _loginDto;

    protected override Task OnInitializedAsync()
    {
        _loginDto = new();
        return base.OnInitializedAsync();
    }

    private async Task Submit()
    {
        var response = await Http.PostAsJsonAsync("login", _loginDto);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", data);
            var userInfoResponse = await Http.GetAsync("account/info");

            if (userInfoResponse.IsSuccessStatusCode)
            {
                var userInfo = await userInfoResponse.Content.ReadFromJsonAsync<UserDto?>();
                await AuthenticateStateProvider.AuthenticateAsync(userInfo);
                NavigationManager.NavigateTo("/");
            }
        }
    }

}