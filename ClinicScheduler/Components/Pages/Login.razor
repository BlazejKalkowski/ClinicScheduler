@page "/zaloguj"
@using ClinicScheduler.Dto
@using ClinicScheduler.Middleware
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Net
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject CustomAuthenticateStateProvider AuthenticateStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [RequireAntiforgeryToken(required: false)]


<h3>Login</h3>

@* <MudGrid Justify="Justify.Center">
    <MudItem lg="3">
        <EditForm OnInvalidSubmit="Submit" Model="_loginDto">
            <MudTextField FullWidth="true" Label="Email" @bind-Value="_loginDto.Email"/>
            <MudTextField FullWidth="true" InputType="InputType.Password" Label="Password" @bind-Value="_loginDto.Password" />
            <AntiforgeryToken />
            <MudButton ButtonType="ButtonType.Submit">Sign In</MudButton>
        </EditForm>
    </MudItem>
</MudGrid> *@

<form method="post" @formname="contact" @onsubmit="Submit">
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_loginDto.Email" />
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="_loginDto.Password"  />
    </div>
    <button>Submit</button>
    <AntiforgeryToken />
</form>


@code {
    [SupplyParameterFromForm]
    private LoginDto _loginDto{ get; set; } = new();


    private async Task Submit()
    {
        var response = await Http.PostAsJsonAsync("/login", _loginDto);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", data);
            var userInfoResponse = await Http.GetAsync("/manage/info");


            if (userInfoResponse.IsSuccessStatusCode)
            {
                var userInfo = await userInfoResponse.Content.ReadFromJsonAsync<UserDto?>();
                await AuthenticateStateProvider.AuthenticateAsync(userInfo);
                NavigationManager.NavigateTo("/");
            }
        }
    }

}