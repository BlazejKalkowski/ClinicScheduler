@page "/doctor"
@using ClinicScheduler.Interfaces
@using ClinicScheduler.Entities
@inject IDoctorService DoctorService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Doctors</PageTitle>

<h3>Doctors</h3>


@if (_doctors.Count == 0)
{
    <p><em>Loading Doctors...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>LastName</th>
                <th>Specialization</th>
                <th>Edit Doctor</th>
                <th>Delete Doctor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doctor in _doctors)
            {
                <tr>
                    <td>@doctor.Name</td>
                    <td>@doctor.LastName</td>
                    <td>@doctor.Specialization</td>
                    <td><button class="btn btn-primary" @onclick="@(() => EditDoctor(doctor.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="@(() => DeleteDoctor(doctor.Id))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="AddDoctor">Add new Doctor</button>
}


@code {
    private List<Doctor> _doctors = new List<Doctor>();

    protected override async Task OnInitializedAsync()
    {
        _doctors = await DoctorService.GetAllDoctorsAsync();
    }

    void AddDoctor()
    {
        NavigationManager.NavigateTo($"/edit-doctor");
    }

    void EditDoctor(int id)
    {
        NavigationManager.NavigateTo($"/edit-doctor/{id}");
    }
    
    async Task DeleteDoctor(int id)
    {
        await DoctorService.DeleteDoctorAsync(id);
        NavigationManager.NavigateTo($"/doctor");
    }

}
