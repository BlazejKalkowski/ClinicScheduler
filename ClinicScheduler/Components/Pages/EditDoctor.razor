@page "/edit-doctor"
@page "/edit-doctor/{id:int}"
@using ClinicScheduler.Interfaces
@using ClinicScheduler.Entieties

@inject IDoctorService DoctorService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if(Id is null)
{
    <PageTitle>Add a New Doctor</PageTitle>
    <h4>Add a New Doctor</h4>
}
else
{
    <PageTitle>Edit @CurrentDoctor.FullName</PageTitle>
    <h4>Edit @CurrentDoctor.FullName</h4>
}

<EditForm Model="CurrentDoctor" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="CurrentDoctor.Name" Placeholder="Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastName">Last Name</label>
        <InputText id="lastName" @bind-Value="CurrentDoctor.LastName" Placeholder="Last Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="specialization">Specialization</label>
        <InputText id="specialization" @bind-Value="CurrentDoctor.Specialization" Placeholder="Specialization" class="form-control"></InputText>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    public Doctor CurrentDoctor { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var doctor = await DoctorService.GetDoctorByIdAsync((int)Id);
            if (doctor is not null)
                CurrentDoctor = doctor;
        }


    }

    async Task HandleSubmit()
    {
        if(Id is not null)
        {
            await DoctorService.UpdateDoctorAsync(CurrentDoctor,(int)Id);
            NavigationManager.NavigateTo("/doctor");
        }
        else
        {
            await DoctorService.AddDoctorAsync(CurrentDoctor);
            NavigationManager.NavigateTo("/doctor");
        }
        
    }
}
