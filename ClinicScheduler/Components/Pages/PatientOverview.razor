@page "/patient"
@using ClinicScheduler.Interfaces
@using ClinicScheduler.Entities
@inject IPatientService PatientService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Patients</PageTitle>
<h3>Patients</h3>

@if (_patients.Count == 0)
{
    <p><em>Loading Patients</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>LastName</th>
            <th>PESEL</th>
            <th>DateOfBirth</th>
            <th>Edit Patient</th>
            <th>Remove Patient</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var patient in _patients)
        {
            <tr>
                <td>@patient.Name</td>
                <td>@patient.LastName</td>
                <td>@patient.PESEL</td>
                <td>@patient.DateOfBirth</td>
                <td><button class="btn btn-primary" @onclick="@(() => EditPatient(patient.Id))">Edit</button></td>
                <td><button class="btn btn-danger" @onclick="@(() => DeletePatient(patient.Id))">Edit</button></td>
            </tr>
        }
        </tbody>
    </table>
    
    <button class="btn btn-primary" @onclick="AddPatient">Add new Patient</button>
}

@code {
    List<Patient> _patients = new List<Patient>();

    protected override async Task OnInitializedAsync()
    {
        _patients = await PatientService.GetAllPatientsAsync();
    }

    void AddPatient()
    {
        NavigationManager.NavigateTo("/edit-patient");
    }

    void EditPatient(int id)
    {
        NavigationManager.NavigateTo($"/edit-patient/{id}");
    }

    async Task DeletePatient(int id)
    {
        await PatientService.DeletePatientAsync(id);
        NavigationManager.NavigateTo("/patient");
        
    }

}
