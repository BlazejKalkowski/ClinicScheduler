@page "/appointment"
@using ClinicScheduler.Entities
@inject DialogService DialogService
@rendermode @(new InteractiveServerRenderMode(prerender: false))
<h3>AppointmentOverview</h3>

<RadzenScheduler @ref="_scheduler" SlotRender=@OnSlotRender style="height: 768px;"
                 TItem="Appointment"
                 Data="_appointment"
                 StartProperty="Start" EndProperty="End"
                 TextProperty="Text"
                 SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
                 AppointmentMove=@OnAppointmentMove>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@code {
    RadzenScheduler<Appointment> _scheduler;
    Dictionary<DateTime, string> events = new();
    private List<Appointment> _appointment = new()
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2)";
        }

        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19 )
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2)";
        }
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year" )
        {
            Appointment appointment = await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });
            if (appointment != null)
            {
                _appointment.Add((appointment));
                await _scheduler.Reload();
            }
        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> arg)
    {
        var copy = new Appointment
        {
            Start = arg.Data.Start,
            End = arg.Data.End,
            Text = arg.Data.Text
        };

        var data = await DialogService.OpenAsync<EditAppointment>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            arg.Data.Start = data.Start;
            arg.Data.End = data.End;
            arg.Data.Text = data.Text;
        }

        await _scheduler.Reload();
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    private async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs arg)
    {
        var draggedAppointment = _appointment.FirstOrDefault(x => x == arg.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + arg.TimeSpan;
            draggedAppointment.End = draggedAppointment.End + arg.TimeSpan;

            await _scheduler.Reload();
        }
    }

}