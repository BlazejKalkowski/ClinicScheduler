@page "/edit-visit"
@page "/edit-visit/{id:int}"
@using ClinicScheduler.Models
@using ClinicScheduler.Interfaces

@inject IVisitService VisitService
@inject IDoctorService DoctorService
@inject IPatientService PatientService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


@if (Id is null)
{
    <PageTitle>Add a new Visit</PageTitle>
    <h4>Add a new Visit</h4>
}
else
{
    <PageTitle>Edit @CurrentVisit.Patient visit on @CurrentVisit.DateOfVisit</PageTitle>
    <h4>Edit @CurrentVisit.Patient visit on @CurrentVisit.DateOfVisit</h4>
}

<EditForm Model="CurrentVisit" OnSubmit="HandleSubmit">
    <div>
        <label for="patientName">Patient Name</label>
        <InputText id="patientName" @bind-Value="@CurrentPatient.Name"></InputText>
    </div>
    <div>
        <label for="patientSurname">Patient Surmame</label>
        <InputText id="patientSurname" @bind-Value="@CurrentPatient.LastName"></InputText>
    </div>
    <div class="col-sm-10">
        <label> Doctor</label>
        <InputSelect id="doctor" @bind-Value="CurrenDoctor.Id" class="form-control">
            @foreach (var doctor in Doctors)
            {
                <option value="@doctor.Id">@doctor.FullName</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>Is Confirmed</label>
        <InputCheckbox  @bind-Value="@CurrentVisit.IsConfirmed"></InputCheckbox>
    </div>
    <div>
        <label >Prescription Number</label>
        <InputNumber TValue="int" @bind-Value="@CurrentVisit.PrescriptionNumber"></InputNumber>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    public Visit CurrentVisit { get; set; } = new();
    public Patient CurrentPatient { get; set; } = new();
    public Doctor CurrenDoctor { get; set; } = new();
    
    public List<Doctor> Doctors { get; set; } = new();
    public string DoctorId { get; set; }

    
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var visit = await VisitService.GetVistByIdAsync((int)Id);
            if (visit is not null)
                CurrentVisit = visit;
                CurrentPatient = CurrentVisit.Patient;
                CurrenDoctor = CurrentVisit.Doctor;
                DoctorId = CurrenDoctor.Id.ToString();
        }
        Doctors = await DoctorService.GetAllDoctorsAsync();
         
         
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            await VisitService.UpdateVisitAsync(CurrentVisit, (int)Id);
            NavigationManager.NavigateTo("/visit");
        }
        else
        {
            await VisitService.AddVisitAsync(CurrentVisit);
            NavigationManager.NavigateTo("/visit");
        }
    }

}